#ifndef __EvtPanelRegleur__
#define __EvtPanelRegleur__

/**
@file
Subclass of PanelRegleur, which is generated by wxFormBuilder.
*/

#include "PanelRegleur.h"

//// end generated include
/*******************************************************************************
 *  Fichier:  EvtPanelRegleur.h
 *  Projet:   Chaîne d'anodisation
 *  Crée le:  //2018
 *  Utilité:  Gestion des événements du panel régleur
 *  Auteur:   Nassim Boubziz
              Florian Provost
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
// Inclusion des fichiers .h
////////////////////////////////////////////////////////////////////////////////
#include "../Client/Protocoles.h"
#include "../Client/Client.h"
class Client;
#include "../BdD/DataAnodisation.h"
class DataAnodisation;
#include "../BdD/DonneesIHMregleur.h"
class DonneesIHMregleur;
class EvtFramePrincipal;

////////////////////////////////////////////////////////////////////////////////
// Librairies
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
using std::cout;
using std::endl;
using std::cerr;
#include <list>
using std::list;
#include <string>
using std::string;
#include <vector>
using std::vector;
#include <sstream>
using std::ostringstream;
/*** Librairies wxWidgets ***/
// Couleur wxWidget
#include <wx/colour.h>
#include <wx/gdicmn.h>
// Boite de dialogue wxWidgets
#include <wx/log.h>
// wxMessageBox
#include <wx/msgdlg.h>

#include <wx/unichar.h>

/** Implementing PanelRegleur */
class EvtPanelRegleur : public PanelRegleur
{
    protected:
        // Handlers for PanelRegleur events.
        void OnListBoxAffichageSelectionMouvements( wxCommandEvent& event );
        void OnListBoxModifierSelectionMouvements( wxCommandEvent& event );
        void OnApplyButtonModifierMouvementClick( wxCommandEvent& event );
        void OnCancelButtonModifierMouvementClick( wxCommandEvent& event );
        void OnSaveButtonCreerMouvementClick( wxCommandEvent& event );
        void OnListBoxDetruireSelectionMouvements( wxCommandEvent& event );
        void OnYesButtonDetruireMouvementClick( wxCommandEvent& event );
        void OnListBoxTesterSelectionMouvements( wxCommandEvent& event );
        void OnCancelButtonTestMouvementClick( wxCommandEvent& event );
        void OnInfoBrasTestMouvementClick( wxCommandEvent& event );
        void OnYesButtonTesterMouvementClick( wxCommandEvent& event );
        void OnListBoxAffichageSelectionTrajectoires( wxCommandEvent& event );
        void OnListBoxModifierSelectionTrajectoires( wxCommandEvent& event );
        void OnApplyButtonModifierTrajectoiresClick( wxCommandEvent& event );
        void OnCancelButtonModifierTrajectoiresClick( wxCommandEvent& event );
        void OnListBoxSelectionMouvementsCreationTrajectoire( wxCommandEvent& event );
        void OnSaveButtonCreerTrajectoiresClick( wxCommandEvent& event );
        void OnListBoxDetruireSelectionTrajectoires( wxCommandEvent& event );
        void OnYesButtonDetruireTrajectoiresClick( wxCommandEvent& event );
        void OnListBoxTesterSelectionTrajectoires( wxCommandEvent& event );
        void OnCancelButtonTestTrajectoireClick( wxCommandEvent& event );
        void OnInfoBrasTestTrajectoireClick( wxCommandEvent& event );
        void OnYesButtonTesterTrajectoiresClick( wxCommandEvent& event );
    public:
        /** Constructor */
        EvtPanelRegleur( wxWindow* parent );
    //// end generated class members
    public:
        void CacheNoteBookMouvement();
        void CacheNoteBookTrajectoire();
        void MontreNoteBookMouvement();
        void MontreNoteBookTrajectoire();
        void RempliListBoxMouvements();
        void RempliListBoxTrajectoires();
        void VideListBoxMouvements();
        void VideListBoxTrajectoires();
        
        // Acesseur
        void SetBdD(DataAnodisation* bdd_anodisation){m_bdd_anodisation = bdd_anodisation;};
        void SetClient(Client* client){m_client = client;};
        void SetClientConnecte(bool client_connecte){m_client_connecte = client_connecte;};
        void SetDonneesIHM(DonneesIHMregleur* donnees_IHM){m_donnees_IHM = donnees_IHM;};
        void SetFrame(EvtFramePrincipal* frame){m_frame = frame;};
        
    private:
        Client* m_client;
        DataAnodisation* m_bdd_anodisation;
        DonneesIHMregleur* m_donnees_IHM;
        EvtFramePrincipal* m_frame;
        bool m_bdd_connecte;
        bool m_client_connecte;
        
        bool LancerFabrication(wxString id_processus);
        void EnvoiMessage(wxString message);
        void EnvoiErreurRemplissage(wxString message);
};

#endif // __EvtPanelRegleur__
