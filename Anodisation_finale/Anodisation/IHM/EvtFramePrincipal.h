#ifndef __EvtFramePrincipal__
#define __EvtFramePrincipal__

/**
@file
Subclass of FramePrincipal, which is generated by wxFormBuilder.
*/

#include "FramePrincipal.h"

//// end generated include
/*******************************************************************************
 *  Fichier:  EvtFramePrincipal.h
 *  Projet:   Chaîne d'anodisation
 *  Crée le:  29/04/2018
 *  Utilité:  Gestion des événements du frame principal
 *  Auteur:   Florian Provost
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
// Définition
////////////////////////////////////////////////////////////////////////////////
#define ID_CLIENT 100
#define ID_RESPONSABLE 110
#define ID_REGLEUR 120

#define DSN "Anodisation"
#define IP "localhost" /*"192.168.1.143"*/
#define PORT 30000

////////////////////////////////////////////////////////////////////////////////
// Inclusion des fichiers .h
////////////////////////////////////////////////////////////////////////////////
#include "../Client/Protocoles.h"
#include "../Client/Client.h"
class Client;
#include "../BdD/DataAnodisation.h"
class DataAnodisation;
#include "../BdD/DonneesIHMresponsable.h"
#include "../BdD/DonneesIHMregleur.h"
#include "EvtFrameAide.h"
#include "EvtFrameApropos.h"

////////////////////////////////////////////////////////////////////////////////
// Librairies
////////////////////////////////////////////////////////////////////////////////
#include <iostream>
using std::cout;
using std::endl;
using std::cerr;
#include <list>
using std::list;
#include <string>
using std::string;
#include <vector>
using std::vector;
#include <sstream>
using std::ostringstream;
/*** Librairies wxWidgets ***/
// Couleur wxWidget
#include <wx/colour.h>
#include <wx/gdicmn.h>
// Boite de dialogue wxWidgets
#include <wx/log.h>
// wxMessageBox
#include <wx/msgdlg.h>

#include <wx/unichar.h>

/** Implementing FramePrincipal */
class EvtFramePrincipal : public FramePrincipal
{
    protected:
        // Handlers for FramePrincipal events.
        void OnCharEntered(wxKeyEvent& event);
        void OnFrameClose(wxCloseEvent& event);
        void OnButtonConnexionToggle(wxCommandEvent& event);
        void OnTextMaxLength(wxCommandEvent& event);
        void OnButtonChoixTrajectoiresClicks(wxCommandEvent& event);
        void OnButtonChoixMouvementsClicks(wxCommandEvent& event);
        void OnButtonViderAffichageClick(wxCommandEvent& event);
        void OnMenuQuitterSelection(wxCommandEvent& event);
        void OnMenuViderAffichageSelection(wxCommandEvent& event);
        void OnMenuAideSelection(wxCommandEvent& event);
        void OnMenuAproposSelection(wxCommandEvent& event);
    public:
        /** Constructor */
        EvtFramePrincipal( wxWindow* parent );
    //// end generated class members
    public:
        string ConversionEnString(wxString texte);
        string IntEnString(int nombre);
        wxString DecouperTexteDebut(wxString texte, int position);
        wxString DecouperTexteFin(wxString texte, int position);
        wxString ConversionEnWxString(string texte);
        // Fonction de mise en forme de la séléction pour garder que le début (id)
        wxString GardeIdSelection(wxString texte);

    protected:
        // Affichage et action des events du client
        void AgitServeurPerdu(wxCommandEvent& event);
        void AfficheInfoClient(wxCommandEvent& event);
        void AfficheMessageClient(wxCommandEvent& event);
        // Modification de la barre de statut
        void AfficheStatus(wxString texte, int position);
        // Afficher des message depuis EvtRegleur et EvtResponsable
        void AfficheMessagePanel(wxCommandEvent& event);
        // Afficher les erreurs des requete pour le remplisage de l'IHM
        void AfficheErreurRemplisage(wxCommandEvent& event);

    private:
        Client* m_client;
        DataAnodisation* m_bdd_anodisation;
        DonneesIHMresponsable* m_donnees_IHM_responsable;
        DonneesIHMregleur* m_donnees_IHM_regleur;
        bool m_bdd_connecte;
        bool m_client_connecte;
        bool m_fabrication;
        bool m_identifie;
        bool point_virgule_saisie_creer;
        bool point_virgule_saisie_modifier;
        wxBitmap BmpRouge, BmpVert;
        wxString m_login;

        // Tester le login et le mot de passe
        bool VerificationLogin(wxString login, wxString pass);
        // Déconnection du client
        void DeconnexionClient(wxString message);



};

#endif // __EvtFramePrincipal__
